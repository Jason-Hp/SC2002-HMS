@startuml


' Abstract User class
abstract class User {
  - userId: String
  - password: String = "password"
  - name: String
  - age: int
  - gender: String
  + changePassword(newPassword: String): void
  + getUserId(): String
  + getName(): String
  + getPassword(): String
  + displayMenu(): void
}

' Patient class inherits from User
class Patient {
  - medicalRecord: MedicalRecord
  - scheduledAppointments: List<Appointment>
  - availableDates: Available
  - appointmentOutcomeRecords: List<AppointmentOutcomeRecord>
  - allAppointments: List<Appointment>
  + viewMedicalRecord(): void
  + updatePersonalInfo(newEmail: String, newContact: int): void
  + scheduleAppointment(): void
  + rescheduleAppointment(): void
  + cancelAppointment(): void
  + viewScheduledAppointments(): void
  + viewAppointmentOutcomeRecords(): void
}

' Doctor class inherits from User
class Doctor {
  - patientMedicalRecords: List<MedicalRecord>
  - personalSchedule: Available
  - availableDates: Available
  - appointmentRequests: List<Appointment>
  - upcomingAppointments: List<Appointment>
  - allAppointmentOutcomeRecords: List<AppointmentOutcomeRecord>
  + viewPersonalSchedule(): void
  + viewPatientMedicalRecords(): void
  + setAvailability(): void
  + acceptOrDecline(): void
  + recordAppointmentOutcome(): void
}

' Pharmacist class inherits from User
class Pharmacist {
  - allAppointmentOutcomeRecords: List<AppointmentOutcomeRecord>
  - allInventoryItems: List<Inventory>
  + viewAppointmentOutcomeRecords(): void
  + updatePrescriptionStatus(): void
  + viewMedicationInventory(): void
  + replenishmentRequest(): void
  - updateInventory(): void
}

' Administrator class inherits from User
class Administrator {
  + displayMenu(): void

}

' Appointment class
class Appointment {
  - patient: Patient
  - doctor: Doctor
  - date: String
  - time: String
  - status: String
  - outcome: AppointmentOutcomeRecord
  + updateAppointment(newOutcome: AppointmentOutcomeRecord): void
  + printInfo(): void
  + printInfoForAdmin(): void
  + getAppointmentOutcome(): AppointmentOutcomeRecord
}

' AppointmentOutcomeRecord class
class AppointmentOutcomeRecord {
  - date: String
  - diagnoses: String
  - treatment: String
  - consultationNotes: String
  - prescriptionList: List<Prescription>
  + setOutcome(serviceType: String, prescribedMedication: String, consultationNotes: String): void
  + printInfo(): void
}

' MedicalRecord class
class MedicalRecord {
  - userId: String
  - email: String
  - gender: String
  - name: String
  - bloodType: String
  - dateOfBirth: String
  - diagnosesTreatmentPrescription: List<AppointmentOutcomeRecord>
  + printRecord(): void
  + updateRecord(email: String, contactNumber: int): void
  + updateRecord(outcome: AppointmentOutcomeRecord): void
  + getUserId(): String
}

' Prescription class
class Prescription {
  - medicineName: String
  - status: String
  + updateStatus(): void
  + getName(): String
  + getStatus(): String
  + display(): void
}

' Available class for managing available appointment slots
class Available {
  - availableDates: List<Availability>
  + viewAvailableAppointmentSlots(): int
  + selectAvailableSlot(scheduledAppointments: List<Appointment>, patient: Patient): Appointment
}

' Availability class for representing individual availability slots
class Availability {
  - doctor: Doctor
  - date: String
  - time: String
  - status: String
  + getDoctor(): Doctor
  + getDate(): String
  + getTime(): String
  + getStatus(): String
  + setStatus(newStatus: String): void
}

' Inventory class for managing medical stock
class Inventory {
  - medicineName: String
  - stockAvailable: int
  - alertLevel: int
  - status: String
  + updateStock(): boolean
  + getName(): String
  + getStock(): int
  + getStatus(): String
  + setStatus(newStatus: String): void
  + display(): void
  - lowStockAlert(): void
}

' CSVReader and its parsers
class CSVReader<T> {
  + read(String filePath, CSVParser<T> parser): ArrayList<T>
}
interface CSVParser<T> {
  + parse(String line): T
}
class MedicineParser implements CSVParser {
  + parse(String line): T
}
class PatientParser implements CSVParser {
  + parse(String line): T
}
class StaffParser implements CSVParser {
  + parse(String line): T
}

' HMS main class
class HMS {
  + main(args: String[]): void
}

' Relationships with Role Names and Multiplicity

User <|-- Patient
User <|-- Doctor
User <|-- Pharmacist
User <|-- Administrator

Patient --> MedicalRecord : "has a"
Doctor --> MedicalRecord : "accesses" 
Doctor --> Appointment : "manages"
Doctor --> AppointmentOutcomeRecord : "records"
Appointment --> Patient : "for"
Appointment --> Doctor : "with"
MedicalRecord --> AppointmentOutcomeRecord : "stores"
AppointmentOutcomeRecord --> Prescription : "contains"
Available --> Availability : "aggregates"
Patient --> Available : "uses"
Administrator --> Inventory : "manages"
Inventory --> Prescription : "contains"

CSVReader <|-- MedicineParser
CSVReader <|-- PatientParser
CSVReader <|-- StaffParser

HMS ..> CSVReader : "reads from CSV files"

@enduml
