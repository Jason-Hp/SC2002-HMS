@startuml

' Define layout direction and spacing for better readability
left to right direction
skinparam classSpacing 20
skinparam ranksep 20
skinparam nodesep 20
skinparam wrapWidth 200
skinparam maxClassWidth 200
skinparam defaultFontSize 12
skinparam arrowThickness 1

' Define Packages
package model {
    class AppointmentOutcomeRecord {
        - String date
        - String diagnoses
        - String treatment
        - String consultationNotes
        - ArrayList<Prescription> prescriptionList
        + String getDate()
        + String getDiagnoses()
        + String getTreatment()
        + ArrayList<Prescription> getPrescriptionList()
        + String getConsultationNotes()
        + void setConsultationNotes(String)
        + void setDiagnoses(String)
        + void setTreatment(String)
        + void setPrescriptionList(ArrayList<Prescription>)
        + void printInfo()
    }

    class Prescription {
        - String medicineName
        - PrescriptionStatus status
        + void updateStatus()
        + String getName()
        + PrescriptionStatus getStatus()
        + void display()
    }

    enum PrescriptionStatus {
        + PENDING
        + DISPENSED
    }

    abstract class User {
        - String userId
        - String password
        - String name
        - int age
        - String gender
        - ArrayList<String> inbox
        + void showInbox()
        + void clearInbox()
        + void sendMessage(User,String)
        + void changePassword(String)
        + String getUserId()
        + String getName()
        + int getAge()
        + String getGender()
        + String getPassword()
        + void setName(String)
        + void setAge(int)
        + void setGender(String)
        + {abstract} void displayMenu()
        + void setStaffList(ArrayList<User>)
    }

    class Appointment {
        - Patient patient
        - Doctor doctor
        - String date
        - String time
        - String status
        - AppointmentOutcomeRecord outcome
        + void updateAppointment(AppointmentOutcomeRecord)
        + void printInfoForAdmin()
        + AppointmentOutcomeRecord getAppointmentOutcome()
        + String getDate()
        + String getTime()
        + Doctor getDoctor()
        + Patient getPatient()
        + String getStatus()
        + void setStatus(String)
    }

    class Pharmacist {
        - Scanner scan
        - ArrayList<AppointmentOutcomeRecord> allAppointmentOutcomeRecords
        - ArrayList<Inventory> allInventoryItems
        - ArrayList<User> staffList
        + void setStaffList(ArrayList<User>)
        + void displayMenu()
        + void viewAppointmentOutcomeRecords()
        + void updatePrescriptionStatus()
        - void updateInventory(Prescription)
        + void viewMedicationInventory()
        + void replenishmentRequest()
        - User getAdmin()
    }

    class Doctor {
        - ArrayList<MedicalRecord> patientMedicalRecords
        - Available personalSchedule
        - Available availableDates
        - ArrayList<Appointment> appointmentRequests
        - ArrayList<Appointment> upcomingAppointments
        - ArrayList<AppointmentOutcomeRecord> allAppointmentOutcomeRecords
        - Scanner scan
        - ArrayList<Inventory> storage
        + void displayMenu()
        + void viewPersonalSchedule()
        + void viewPatientMedicalRecords()
        + void updatePatientMedicalRecord()
        + void setAvailability()
        + void incomingAppointment(Appointment)
        + void removeIncommingAppointment(Appointment)
        - void updatePatientList()
        + void acceptOrDecline()
        + void viewUpcomingAppointments()
        + void recordAppointmentOutcome()
    }

    class Patient {
        - MedicalRecord medicalRecord
        - ArrayList<Appointment> scheduledAppointments
        - Available availableDates
        - ArrayList<AppointmentOutcomeRecord> appointmentOutcomeRecords
        - ArrayList<Appointment> allAppointments
        + void displayMenu()
        + MedicalRecord getMedicalRecord()
        + ArrayList<Appointment> getScheduledAppointments()
        + void updateAppointmentOutcomeRecords(Appointment)
        + void viewMedicalRecord()
        + void updatePersonalInfo(String)
        + void updatePatientOutcome(AppointmentOutcomeRecord)
        + void viewAppointmentOutcomeRecords()
        + void viewScheduledAppointments()
        + void scheduleAppointment()
        + void rescheduleAppointment()
        + boolean cancelAppointment()
    }

    class Administrator {
        - InventoryManagement inventoryManagement
        - StaffManagement staffManagement
        - ArrayList<Appointment> allAppointments
        - InputIntChoice inputIntChoice
        - SystemManager systemManager
        - ArrayList<User> staffList
        + void setStaffList(ArrayList<User>)
        + void manageInventory()
        + void approveRequest()
        + void manageStaff()
        + void displayMenu()
        - void viewAppointment(ArrayList<Appointment>)
    }

    class MedicalRecord {
        - String userId
        - String email
        - String gender
        - String name
        - String bloodType
        - String dateOfBirth
        - ArrayList<AppointmentOutcomeRecord> diagnosesTreatmentPrescription
        + void updateRecord(String)
        + void updateRecord(AppointmentOutcomeRecord)
        + String getUserId()
        + String getName()
        + String getEmail()
        + String getBloodType()
        + String getDateOfBirth()
        + String getGender()
        + ArrayList<AppointmentOutcomeRecord> getDiagnosesTreatmentPrescription()
    }

    class Inventory {
        - String medicineName
        - int stockAvailable
        - Status status
        - RequestStatus reqStatus
        + boolean updateStock()
        - void lowStockAlert()
        + String getName()
        + int getStock()
        + void setStock(int)
        + Status getStatus()
        + RequestStatus getreqStatus()
        + int getAlertLevel()
        + void setStatus(Status)
        + void setreqStatus(RequestStatus)
        + void setAlertLevel(int)
        + void display()
    }

    enum RequestStatus {
        + NULL
        + PENDING
        + APPROVED
    }

    enum Status {
        + SUFFICIENT
        + LOW
    }

    class Available {
        - ArrayList<Availability> availableDates
        - Scanner scan
        + int viewAvailableAppointmentSlots()
        + Appointment selectAvailableSlot(ArrayList<Appointment>, Patient)
        + void updateAvailableDates(Doctor, String, String)
        + void addAvailableDates(Availability)
    }
}

package view {
    interface DisplayMenu {
    }

    class UpdatePresriptionStatusMenu {
        + {static} void display()
    }

    class InputTimeChoice {
        - String[] time
        + String getTime()
    }

    class TimeDisplay {
        + {static} void display()
    }

    class EmailUpdateDisplay {
        + {static} void display()
    }

    class DisplayInbox {
        + {static} void display(ArrayList<String>)
    }

    class AppointmentsDisplay {
        + {static} void display(ArrayList<Appointment>)
    }

    class DayChecker {
        - String[] months
        + int getMonthIndex(String)
        + boolean dayCheck(String, int)
    }

    class DisplayLog {
        + {static} void display(String)
    }

    class InputMonthChoice {
        - String[] months
        + String getMonth()
    }

    class PrescriptionDisplay {
        + {static} void display(Prescription)
    }

    interface InputInt {
        + int getIntChoice()
    }

    class InputPrescriptionChoice {
        + int getPrescription()
    }

    class InventoryDisplay {
        + {static} void display(Inventory)
    }

    class DoctorDisplayMenu {
        + {static} void display()
    }

    class DayDisplay {
        + {static} void display()
    }

    class InputID {
        + String getStringInput()
    }

    class MonthDisplay {
        + {static} void display()
    }

    class MedicalRecordDisplay {
        + {static} void display(MedicalRecord)
    }

    class InputDayChoice {
        + int getDay(String)
    }

    interface Display {
        + {static} void display()
    }

    class AvailableDatesDisplay {
        + {static} void display(ArrayList<Availability>)
    }

    class InputPassword {
        + String getStringInput()
    }

    class InputPasswordStrict {
        + String getStringInput()
    }

    class ReplenishmentRequestMenu {
        + {static} void display()
    }

    interface InputString {
        + String getStringInput()
    }

    class RoleDisplayMenu {
        + {static} void display()
    }

    class StaffMDisplayMenu {
        + {static} void display()
    }

    class MedicineDisplay {
        + {static} void display(ArrayList<Inventory>)
    }

    class StaffDisplay {
        + {static} void display(ArrayList<User>)
    }

    class InputEmail {
        + String getStringInput()
    }

    class InventoryDisplayMenu {
        + {static} void display()
    }

    class DisplayPrompt {
        + {static} void display(String)
    }

    class PatientDisplayMenu {
        + {static} void display()
    }

    class AdminDisplayMenu {
        + {static} void display()
    }

    class PharmacistDisplayMenu {
        + {static} void display()
    }

    class AppointmentOutcomeRecordDisplay {
        + {static} void display(ArrayList<AppointmentOutcomeRecord>)
    }
}

package system {
    interface CSVParser<T> {
        ~ T parse(String)
    }

    class CSVReader {
        + ArrayList<T> read(String, CSVParser<T>)
    }

    class PatientParser {
        - Available availableDates
        - ArrayList<Appointment> allAppointments
        + Patient parse(String)
    }

    class StaffParser {
        - ArrayList<AppointmentOutcomeRecord> allAppointmentOutcomeRecords
        - Available availableDates
        - ArrayList<Inventory> storage
        - ArrayList<User> staffList
        - ArrayList<Appointment> allAppointments
        - SystemManager systemManager
        + User parse(String)
    }

    class DoctorParser {
        - ArrayList<AppointmentOutcomeRecord> allAppointmentOutcomeRecords
        - Available availableDates
        - ArrayList<Inventory> storage
        + Doctor parse(String)
    }

    class InventoryParser {
        + Inventory parse(String)
    }

    class AdministratorParser {
        + Administrator parse(String)
    }

    class PharmacistParser {
        - ArrayList<AppointmentOutcomeRecord> allAppointmentOutcomeRecords
        - Available availableDates
        - ArrayList<Inventory> storage
        + User parse(String)
    }

    class HMS {
        + {static} void main(String[])
    }

    class SystemManager {
        - SessionManager sessionManager
        - ArrayList<Inventory> storage
        - ArrayList<User> staffList
        - Available availableDates
        - ArrayList<Appointment> allAppointments
        - ArrayList<AppointmentOutcomeRecord> allAppointmentOutcomeRecords
        - boolean shutdown
        - ArrayList<User> users
        - String medicineListPath
        - String patientListPath
        - String staffListPath
        + void initialise()
        + void loadData()
        + void runSystem()
        + void shutdown()
        + ArrayList<Inventory> getStorage()
        + ArrayList<User> getStaffList()
        + Available getAvailableDates()
        + ArrayList<Appointment> getAllAppointments()
        + ArrayList<AppointmentOutcomeRecord> getAllAppointmentOutcomeRecords()
    }
}

package controller {
    class StaffManagement {
        - ArrayList<User> staffList
        - ArrayList<Inventory> allInventoryItems
        - ArrayList<Appointment> allAppointments
        - InputIntChoice inputRoleChoice
        - InputIntChoice inputIntChoice
        - SystemManager systemManager
        + void manageStaff()
        - void addStaff()
        - User createStaff(String, String, int, String)
        - String generateId(String, int)
        - void updateStaff()
        - void removeStaff()
        - void displayStaff()
    }

    class InventoryManagement {
        - ArrayList<Inventory> allInventoryItems
        - InputIntChoice inputIntChoice
        + void manageInventory()
        - void addStocks()
        - void updateStocks()
        - void removeStocks()
        - void updateAlertLine()
        + void approveRequest()
    }
}

' Define Relationships with Multiplicity and Roles

' Inheritance and Interface Implementations (No multiplicity needed)
system.CSVParser <|.. system.PatientParser
system.CSVParser <|.. system.StaffParser
system.CSVParser <|.. system.DoctorParser
system.CSVParser <|.. system.InventoryParser
system.CSVParser <|.. system.AdministratorParser
system.CSVParser <|.. system.PharmacistParser

view.DisplayMenu <|.. view.UpdatePresriptionStatusMenu
view.DisplayMenu <|.. view.DoctorDisplayMenu
view.DisplayMenu <|.. view.ReplenishmentRequestMenu
view.DisplayMenu <|.. view.RoleDisplayMenu
view.DisplayMenu <|.. view.StaffMDisplayMenu
view.DisplayMenu <|.. view.PatientDisplayMenu
view.DisplayMenu <|.. view.AdminDisplayMenu
view.DisplayMenu <|.. view.InventoryDisplayMenu
view.DisplayMenu <|.. view.PharmacistDisplayMenu

view.Display <|-- view.DisplayInfo
view.DisplayInfo <|.. view.TimeDisplay
view.DisplayInfo <|.. view.EmailUpdateDisplay
view.DisplayInfo <|.. view.DisplayInbox
view.DisplayInfo <|.. view.AppointmentsDisplay
view.DisplayInfo <|.. view.DisplayLog
view.DisplayInfo <|.. view.DayDisplay
view.DisplayInfo <|.. view.MonthDisplay
view.DisplayInfo <|.. view.MedicalRecordDisplay
view.DisplayInfo <|.. view.StaffDisplay
view.DisplayInfo <|.. view.AvailableDatesDisplay
view.DisplayInfo <|.. view.AppointmentOutcomeRecordDisplay
view.DisplayInfo <|.. view.DisplayPrompt

view.InputIntChoice <|-- view.InputTimeChoice
view.InputIntChoice <|-- view.InputMonthChoice
view.InputIntChoice <|-- view.InputPrescriptionChoice
view.InputIntChoice <|-- view.InputDayChoice

view.Input <|-- view.InputString
view.Input <|-- view.InputInt

model.User <|-- model.Pharmacist
model.User <|-- model.Doctor
model.User <|-- model.Patient
model.User <|-- model.Administrator

' Associations with Multiplicity and Roles
' Example 1: AppointmentOutcomeRecord --> Prescription (1..* prescriptions)
model.AppointmentOutcomeRecord "1" --> "*" model.Prescription : contains >

' Example 2: PatientParser --> Available (1 availableDates)
system.PatientParser "1" --> "1" model.Available : uses >

' Example 3: StaffParser --> AppointmentOutcomeRecord (0..* records)
system.StaffParser "0..*" --> model.AppointmentOutcomeRecord : manages >

' Example 4: StaffParser --> Available (1)
system.StaffParser "1" --> model.Available : accesses >

' Example 5: StaffParser --> Inventory (0..* storage)
system.StaffParser "0..*" --> model.Inventory : stores >

' Example 6: StaffParser --> User (0..* staffList)
system.StaffParser "0..*" --> model.User : parses >

' Example 7: StaffManagement --> User (0..* staffList)
controller.StaffManagement "0..*" --> model.User : manages >

' Example 8: StaffManagement --> Inventory (0..* inventoryItems)
controller.StaffManagement "0..*" --> model.Inventory : manages >

' Example 9: StaffManagement --> Appointment (0..* appointments)
controller.StaffManagement "0..*" --> model.Appointment : oversees >

' Example 10: InventoryManagement --> Inventory (0..* inventoryItems)
controller.InventoryManagement "0..*" --> model.Inventory : manages >

' Example 11: SystemManager --> Inventory (0..* storage)
system.SystemManager "0..*" --> model.Inventory : manages >

' Example 12: SystemManager --> User (0..* staffList)
system.SystemManager "0..*" --> model.User : manages >

' Example 13: SystemManager --> Available (1 availableDates)
system.SystemManager "1" --> model.Available : uses >

' Example 14: SystemManager --> Appointment (0..* allAppointments)
system.SystemManager "0..*" --> model.Appointment : manages >

' Example 15: SystemManager --> AppointmentOutcomeRecord (0..* records)
system.SystemManager "0..*" --> model.AppointmentOutcomeRecord : manages >

' Example 16: SystemManager --> User (0..* users)
system.SystemManager "0..*" --> model.User : contains >

' Example 17: Appointment --> Patient (1 patient)
model.Appointment "1" --> model.Patient : involves >

' Example 18: Appointment --> Doctor (1 doctor)
model.Appointment "1" --> model.Doctor : involves >

' Example 19: Appointment --> AppointmentOutcomeRecord (1 outcome)
model.Appointment "1" --> model.AppointmentOutcomeRecord : records >

' Example 20: Doctor --> MedicalRecord (0..* records)
model.Doctor "0..*" --> model.MedicalRecord : maintains >

' Example 21: Patient --> MedicalRecord (1 record)
model.Patient "1" --> model.MedicalRecord : owns >

' Example 22: MedicalRecord --> AppointmentOutcomeRecord (0..*)
model.MedicalRecord "0..*" --> model.AppointmentOutcomeRecord : includes >

' Example 23: Pharmacist --> AppointmentOutcomeRecord (0..* records)
model.Pharmacist "0..*" --> model.AppointmentOutcomeRecord : manages >

' Example 24: Pharmacist --> Inventory (0..* inventoryItems)
model.Pharmacist "0..*" --> model.Inventory : manages >

' Example 25: Pharmacist --> User (0..* staffList)
model.Pharmacist "0..*" --> model.User : interacts with >

' Example 26: Available --> Availability (0..*)
model.Available "0..*" --> model.Availability : contains >

' Example 27: MedicalRecord --> AppointmentOutcomeRecord (0..*)
model.MedicalRecord "0..*" --> model.AppointmentOutcomeRecord : has >

' Example 28: SystemManager --> SessionManager (1)
system.SystemManager "1" --> model.SessionManager : controls >

' Example 29: SystemManager --> Parser Classes (various)
system.SystemManager "1" --> system.PatientParser : uses >
system.SystemManager "1" --> system.StaffParser : uses >
system.SystemManager "1" --> system.DoctorParser : uses >
system.SystemManager "1" --> system.InventoryParser : uses >
system.SystemManager "1" --> system.AdministratorParser : uses >
system.SystemManager "1" --> system.PharmacistParser : uses >

' Example 30: CSVReader --> CSVParser (1 parser)
system.CSVReader "1" --> "1" system.CSVParser : utilizes >

' Example 31: User --> Inbox (0..* messages)
model.User "0..*" --> "0..*" String : receives >

' Example 32: User --> StaffList (if applicable)
' Assuming User can have multiple staff lists, define accordingly

' Example 33: StaffManagement --> SystemManager (1 systemManager)
controller.StaffManagement "1" --> system.SystemManager : interacts with >

' Example 34: InventoryManagement --> SystemManager (1 systemManager)
controller.InventoryManagement "1" --> system.SystemManager : interacts with >

' Example 35: AppointmentOutcomeRecord --> Prescription (0..* prescriptions)
model.AppointmentOutcomeRecord "0..*" --> model.Prescription : includes >

' Example 36: Pharmacist --> AppointmentOutcomeRecord (0..* records)
model.Pharmacist "0..*" --> model.AppointmentOutcomeRecord : manages >

' Continue adding associations as needed based on class attributes

@enduml
